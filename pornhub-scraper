#!/bin/bash
# by Dominik Stanis≈Çaw Suchora <suchora.dominik7@gmail.com>
# License: GNU GPLv3

ucurl() {
    curl -L -g -s --user-agent 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.15.2 Chrome/87.0.4280.144 Safari/537.36' -H 'Accept-Encoding: gzip, deflate' --compressed -H 'Cookie: atatusScript=hide; accessAgeDisclaimerPH=1' "$@"
}

declare threads='4' dir='.' cookie_t
declare -r arg0="$(basename "$0")"
declare NOCOMMENTS='0' NOSOCIAL='0'

usage() {
    printf '%s [OPTION...] [DIR]\n' "$(basename "$0")"
    printf "Download, convert to json and save pornhub pages from its sitemap.\n"
    printf "Type of page depends on [-pvmPu] options.\n"
    printf "Pages will be saved in files named by their sha256 hash of urls and placed in DIR.\n\n"
    printf "Options:\n"
    printf "  -t NUM\tset number of used threads, by default set to 4\n"
    printf "  -p\t\tpornstars\n"
    printf "  -v\t\tvideos\n"
    printf "  -m\t\tmodels\n"
    printf "  -P\t\tplaylists\n"
    printf "  -u FILE\tget users from urls in FILE\n"
    printf "  -C\t\tdo not seek comments\n"
    printf "  -S\t\tdo not seek social things like: subscribers, subscriptions, friends\n"
    printf "  -h\t\tshow help\n"
}

declare jq_comments='map(split("\t") | {
            ("name"):.[2],
            ("userid"):.[4],
            ("user_link"):.[5],
            ("verified"):.[3],
            ("avatar"):.[1],
            ("nested"):.[0],
            ("date"): (
                (.[6] | split(" ")) as $l |
                (if (($l | length) > 1) then
                    ($l[0] | tonumber) as $n |
                    if ($l[1] | test("minut")) then now-($n*60)
                    elif ($l[1] | test("hour")) then now-($n*3600)
                    elif ($l[1] | test("day")) then now-($n*86400)
                    elif ($l[1] | test("week")) then now-($n*604800)
                    elif ($l[1] | test("month")) then now-($n*2635200)
                    elif ($l[1] | test("year")) then now-($n*31557600)
                    else (now-$n) end
                else
                    if ($l[0] | test("Yesterday")) then now-86400
                    else now end
                end) | todate
            ),
            ("message"):.[7],
            ("likes"):.[8]
        })'

declare jq_achievements='split("\t")[:-1]'
declare jq_users='split("\t") | map(split("\"") | {
        ("id"):.[0],
        ("name"):.[1],
        ("link"):.[2]
    })'
declare jq_channels='split("\t")[:-1] | map(split("\"") | {
        ("link"):.[0],
        ("name"):.[1]
    })'
declare jq_gifphotos='split("\t") | map(split("\"") | {
        ("name"):.[0],
        ("list"):(.[1] | split(",")[:-1])
    })'

get_comments() {
    local t url page view_responses='-data-comment-key'
    [ "$NOCOMMENTS" -eq '1' ] && { echo; return; }

    t="$(hgrep 'div +id="cmtContent" | "%i\n"' < /dev/stdin)"

    {
    hgrep -F 'div +class="topCommentBlock clearfix" |  "%l%t,\n"' <<< "$t"

    while :
    do
        for i in $(hgrep 'button +data-ajax-url +data-page-num +data-comment-key | "https://pornhub.com%(data-ajax-url)a\n"' <<< "$t" | sed 's/&amp;/\&/g')
        do
            ucurl -L -b "$cookie_t" "$i" | tr -d '\t\n\r' | hgrep 'div +class="topCommentBlock clearfix" |  "%l%t'"$(sed 's/.*&commentId=//;s/&.*//' <<< "$i")"'\n"' | sed '1,2d'
        done
        url="$(hgrep 'button +data-ajax-url +data-page-num -data-comment-key | "https://pornhub.com%(data-ajax-url)a\n"' <<< "$t" | sed 's/&amp;/\&/g')"
        [ -z "$url" ] && break
        page="$(hgrep 'button +data-ajax-url +data-page-num -data-comment-key | "%(data-page-num)a\n"' <<< "$t")"
        url="$url&page=$((++page))&isLoadMoreAjax=1"
        t="$(ucurl -L -b "$cookie_t" "$url" | tr -d '\t\n\r')"
        hgrep 'div +class="topCommentBlock clearfix" |  "%l%t,\n"' <<< "$t"
    done
    } | sed '/<div class="date">\[\[dateAdd\]\]<\/div>/d; s/^[0-2][^0-9]/false\t\t~~\t\t/;
    s/^[3-9][0-9]*/true\t\t~~\t\t/;
    s/\t\t~~\t\t.*<img class="[^"]*" [A-Za-z-]*src="\([^"]*\)" [^>]* title="\([^"]*\)" *\/> */\t\1\t\2\tfalse\t\t/;
    s/\tfalse\t\t<span class="bg-sprite-icons-profile verified-icon flag tooltipTrig" data-title="Verified Member"><\/span> */\ttrue\t\t/;
    s/\t\t.*<div class="usernameWrap clearfix" data-type="user" data-userid="\([0-9]*\)".*\(data-label="Profile View" rel="[^"]*" href="\([^"]\+\)".*\|<span class="geoBlocked\).*<div class="date\( .*\)*"> *\([^<]*[a-zA-Z0-9.-]\) *<.*class="commentMessage"> *<span>\(.*\)<\/span>.*<span class="[^"]* thumbsUpVote\([0-9]\+\) [^"]*">\([0-9]*\)<.*>\([0-9,]\+\)$/\t\1\t\3\t\5\t\6\t\7\t\8\t\9/' | awk -F '\t' '
    {
        if ($11 == ",") {
            x[gx++] = $0;
        } else {
            y[gy++] = $0;
        }
    }

    function print_fields(fields) {
        print fields[1], fields[2], fields[3], fields[4], fields[5], fields[6], fields[7], fields[8], fields[10]
    }

    END {
        OFS="\t"
        for (i = 0; i < gx; i++) {
            split(x[i],fi)
            print_fields(fi)
            if (fi[1] == "true")
                continue
            id=fi[9]
            split(x[++i],fi)
            if (i >= gx)
                continue
            while (fi[1] == "true" && i < gx) {
                print_fields(fi)
                split(x[++i],fi)
            }
            if (fi[1] == "false")
                i--
            for (j = 0; j < gy; j++) {
                split(y[j],fi)
                if (fi[11] == id) {
                    fi[1] = "true"
                    print_fields(fi)
                }
            }
        }
    }'
}

get_achievements() {
    ucurl -b "$cookie_t" "$1" | tr -d '\n\t\r' | hgrep 'ul +class="achievementsUl"; div +class=achievementTitle; .* @M"<" | "%i\t"' < /dev/stdin
}

pages_button() {
    local last current='1' t="$(ucurl "$1" | tr -d '\n\t\r')" sort command="$(</dev/stdin)"
    last="$(hgrep 'button +id=moreDataBtn +onclick | "%(onclick)a\n"' <<< "$t" | sed "s/.*('[^']*', '//;s/',.*//")"
    [ -z "$last" ] && last='1'

    [ "$#" -gt '2' ] && sort="o=$3&"
    
    t="$(hgrep -F 'ul +id=moreData | "%i\n"' <<< "$t")"
    while :
    do
        eval "$command"
        ((current++))
        [ "$current" -gt "$last" ] && break
        t="$(ucurl -b "$cookie_t" -X POST -H 'X-Requested-With: XMLHttpRequest' "$1/ajax?${sort}page=$current" | tr -d '\n\t\r')"
    done
}

get_users() {
    echo 'paste -d '\''"'\'' <(hgrep -F '\''div +data-type=user +data-userid @m"class=\"usernameLink\"" | "%(data-userid)a\n"'\'' <<< "$t") <(hgrep -F '\''a +class="usernameLink" +title | "%(title)a\n"'\'' <<< "$t") <(hgrep -F '\''a +class="usernameLink" +href | "%(href)a\n"'\'' <<< "$t") ' | pages_button "$@" | paste -sd '\t' #id name link
}

get_channels() {
    echo 'hgrep -F '\''div +class=wtitle; a +href | "%(href)a\"%i\t"'\'' <<< "$t"' | pages_button "$@" #link name
}

get_pornstars() { #jq_channels
    echo 'hgrep -F '\''li; a .js-mxp | "%(href)a\"%i\t"'\'' <<< "$t"' | pages_button "$@" #link name
}

get_gifphotos() {
    for i in $(ucurl -b "$cookie_t" "$1" | tr -d '\n\t\r' | hgrep 'div +class="section_header\( .*\)*"; a -class="seeAllButton\( .*\)*" +href=".*" | "https://www.pornhub.com%(href)a\n"')
    do
        printf '%s"' "$(sed 's/.*\///' <<< "$i")"
        echo 'sed '\''s#/gif/#g#g;s#/photo/#p#g;s#/album/#a#g'\'' <<< "$t" | hgrep -F '\''li +id; a +href | "%(href)a,"'\''' | pages_button "$i"
        echo
    done | paste -sd '\t'
}

get_videos() { #jq_gifphotos
    for i in $(ucurl -b "$cookie_t" "$1" | tr -d '\n\t\r' | hgrep 'div +class="section_header\( .*\)*"; a -class="seeAllButton\( .*\)*" -data-title +href=".*" | "https://www.pornhub.com%(href)a\n"')
    do
        printf '%s"' "$(sed 's/.*\///' <<< "$i")"
        echo 'sed '\''s/\/view_video.php?viewkey=//g'\'' <<< "$t" | hgrep -F '\''li +id; .* +class="title"; a +title +href | "%(href)a,"'\''' | pages_button "$i"
        echo
    done | paste -sd '\t'
}

get_costars() { #jq_costars
    local t next="$1"
    
    while :
    do
        t="$(ucurl -b "$cookie_t" "$next" | tr -d '\n\t\r')"
        hgrep 'a +data-mxptype=Pornstar +data-mxptext +href @M"<img" | "%(href)a\"%(data-mxptext)a\t"' <<< "$t" #link name

        next="$(hgrep 'li +class="page_next\( .*\)*"; a +href | "https://www.pornhub.com%(href)a\n"' <<< "$t")"
        [ -z "$next" ] && exit
    done
}

get_v_json() {
    local -r url="$1"
    local -r t2="$(ucurl -c "$cookie_t" "$1")"
    local -r t="$(tr -d '\n\t\r' <<< "$t2")"
    local _tmp1 _tmp2 _tmp3
    #featured on
    {
    echo "${1##*viewkey=}" #id
    hgrep 'script +type="application/ld+json" | "%i"' <<< "$t" | jq -r '"\(.uploadDate)\n\(.author)\n\(.interactionStatistic[0].userInteractionCount | sub(",";"";"g"))\n\(.interactionStatistic[1].userInteractionCount | sub(",";"";"g"))"' #date author views likes
    echo "$(hgrep 'span +class="votesDown" +data-rating | "%(data-rating)a\n"' <<< "$t")" #dlikes
    echo "$(hgrep 'div +class=userInfo; a +class=bolded +href | "%(href)a\n"' <<< "$t")" #author_link
    echo "$(hgrep 'div +class=userInfo; div +data-userid | "%(data-userid)a\n"' <<< "$t")" #author_userid
    hgrep 'script | "%i\n"' <<< "$t2" | sed -n '/var flashvars_[0-9]\+ = {/{s/.*var flashvars_[0-9]\+ = //; s/;$//; p;q}' | jq -r '"\(.video_duration)\n\(.actionTags)\n\(.image_url)\n\(.video_title)\n\(.hotspots)\n\(.defaultQuality)\n\(.thumbs)"' #duration actions thumbnail title hotspots qualities timelines
    _tmp1="$(hgrep 'span +class="favoritesCounter" | "%i\n"' <<< "$t")"
    echo "${_tmp1//[^\.0-9A-Za-z]/}" #fav_count
    echo "$(hgrep 'a +class="\(.* \)*pstar-list-btn\( .*\)*" +href | "%(href)a\n"' <<< "$t" | sed ':x;$!{N;s/\n/\t/;bx}')" #cast
    echo "$(hgrep 'div +class="categoriesWrapper"; a +class="\(.* \)*item\( .*\)*" | "%i\n"' <<< "$t" | sed ':x;$!{N;s/\n/\t/;bx}')" #categories
    echo "$(hgrep 'div +class="tagsWrapper"; a +class="\(.* \)*item\( .*\)*" | "%i\n"' <<< "$t" | sed ':x;$!{N;s/\n/\t/;bx}')" #tags
    echo "$(hgrep 'div +class="relatedSearchTermsContainer"; a +class="\(.* \)*relatedSearchTermsSuggestion\( .*\)*" | "%i\n"' <<< "$t" | sed ':x;s/  *//g;/^$/d;$!{N;s/\n/\t/;bx};')" #attributes
    echo "$(hgrep 'div +class="productionWrapper"; a +class="\(.* \)*item\( .*\)*" | "%i\n"' <<< "$t" | sed ':x;$!{N;s/\n/\t/;bx}')" #production
    echo "$(get_comments <<< "$t")" #comments
    } | jq -RnMcs '
        (inputs | split("\n"))[:-1] as $lines |
        .["id"]=$lines[0] |
        .["date"]=$lines[1] |
        .["author"]=$lines[2] |
        .["views"]=$lines[3] |
        .["likes"]=$lines[4] |
        .["dlikes"]=$lines[5] |
        .["author_link"]=$lines[6] |
        .["author_userid"]=$lines[7] |
        .["duration"]=$lines[8] |
        .["actions"]=$lines[9] |
        .["thumbnail"]=$lines[10] |
        .["title"]=$lines[11] |
        .["hotspots"]=($lines[12] | fromjson) |
        .["qualities"]=($lines[13] | fromjson) |
        .["timelines"]=($lines[14] | fromjson) |
        .["fav_count"]=$lines[15] |
        .["cast"]=($lines[16] | split("\t")) |
        .["categories"]=($lines[17] | split("\t")) |
        .["tags"]=($lines[18] | split("\t")) |
        .["attributes"]=($lines[19] | split("\t")) |
        .["production"]=($lines[20] | split("\t")) |
        .["comments"]=(if $lines[21] == "" then [] else $lines[21:] | '"$jq_comments"' end)'
}

get_about() {
    local t="$(</dev/stdin)"

}

get_p_json() {
    local -r t="$(ucurl -c "$cookie_t" "$1" | tr -d '\n\t\r\a')"
    local _tmp1 t2
    {
    echo "${1#https://www.pornhub.com/}" #id
    _tmp1="$(hgrep 'div +class="\(.* \)*name\( .*\)*"; h1 |  "%i\n"' <<< "$t")"
    echo "${_tmp1// /}" #name
    if [ -n "$(hgrep 'div +class="badge-username"; i +class="verifiedIcon"' <<< "$t")" ]
    then
        echo 'true'
    else
        echo 'false'
    fi #verified
    if [ -n "$(hgrep 'div +class="badge-username"; span +class="trophyPornStar.*"' <<< "$t")" ]
    then
        echo 'true'
    else
        echo 'false'
    fi #winner
    echo "$(hgrep 'img +id="coverPictureDefault" | "%(src)a\n"' <<< "$t")" #cover
    _tmp1="$(hgrep 'img +id="getAvatar" | "%(src)a\n"' <<< "$t")"
    [ -z "$_tmp1" ] && _tmp1="$(hgrep 'div +class="thumbImage"; img +src | "%(src)a\n"' <<< "$t")"
    echo "$_tmp1" #avatar
    _tmp1="$(hgrep 'div +class=".*videoViews.*" +data-title | "%(data-title)a\n"' <<< "$t")"
    echo "${_tmp1//[^0-9]/}" #views
    _tmp1="$(hgrep 'div  +data-title="Subscribers: .*" | "%(data-title)a\n"' <<< "$t")"
    [ -z "$_tmp1" ] && _tmp1="$(hgrep 'div +class="infoBox"; span -class @m"[0-9]" | "%i\n"' <<< "$t")"
    echo "${_tmp1//[^0-9]/}" #subscribers_count
    echo "$(hgrep 'div +class="rankingInfo"; span +class="big" | "%i\n"' <<< "$t" | sed 's/ //g; s/<[^>]*>//g')" #current_rank #weekly_rank #monthly_rank #last_month_rank #yearly_rank
    echo "$(hgrep 'div +class="infoPiece" | "%i\n"' <<< "$t" | sed 's/<[^>]*>/\n/g; s/  */ /g' | sed 's/^ *//; s/ *$//; /^$/d' | sed ':x; $!{N;s/:\n/\a/; s/  */ /g; N; s/\n/\t/; bx}')" #info_pieces
    echo "$(hgrep 'ul +class="\(.* \)*socialList\( .*\)*"; a +href | "%(href)a\t"' <<< "$t")" #social
    _tmp1="$(hgrep 'div +itemprop="description" | "%i\n"' <<< "$t")"
    [ -z "$_tmp1" ] && _tmp1="$(hgrep 'div +class="text longBio js-bioText" | "%i\n"' <<< "$t")"
    [ -z "$_tmp1" ] && _tmp1="$(hgrep 'div +class="content .*"; div -class | "%i\n"' <<< "$t")"
    echo "$(tr '\n' '\t' <<< "$_tmp1" | sed 's/<\/div>.*//')" #desc
    echo "$(hgrep 'div +class="featuredIn"; a +href | "%(href)a\t"' <<< "$t")" #featured

    t2="$(ucurl -b "$cookie_t" "$1/about" | tr -d '\n\t\r')"
    if [ -n "$(hgrep 'li +id="\(pornstar\|profile\)About" | "%l\n"' <<< "$t")" ]
    then
        local a

        for i in 'achievements`achievements`all-achievements``' 'subscribers`users`subscribers`recent_subscribers`' 'subscriptions`users`subscriptions`recent_subscribers`' 'pornstar-subscriptions`pornstars`pornstar-subscriptions`recent_subscribers`' 'channel-subscriptions`channels``recent_subscribers`' 'friends`users`friends`recent_friendships`' 'costars`costars`costars``'
        do
            mapfile -t -d '`' a <<< "$i"
            if [ "$NOSOCIAL" -ne "1" -a -n "$(hgrep 'div +class=sectionHeader; a -class=seeAll +href=".*/'"${a[0]}"'" | "%l\n"' <<< "$t2")" ]
            then
                echo "$(get_${a[1]} "$1/${a[2]}" "${a[3]}")"
            else
                echo
            fi
        done
    else
        printf '\n\n\n\n\n\n\n'
    fi #achievements subscribers subscriptions pornstar_subscriptions channel_subscriptions friends costars

    t2="$(hgrep 'li +id="\(pornstar\|profile\)Photos" @m"\(GIFs\|Photos\)"; .* @M"<"' <<< "$t")"
    if [ -n "$t2" ]
    then
        echo "$(grep -q 'GIFs' <<< "$t2" && get_gifphotos "$1/gifs")"
        echo "$(grep -q 'Photos' <<< "$t2" && get_gifphotos "$1/photos")"
    else
        printf '\n\n'
    fi #gifs photos

    if [ "$NOCOMMENTS" -ne '1' -a -n "$(hgrep 'li +id="\(pornstar\|profile\)Photos" @m">Comments<" | "%l\n"' <<< "$t")" ]
    then
        echo "$(ucurl -b "$cookie_t" "$1/comments" | tr -d '\n\t\r' | get_comments)"
    else
        echo
    fi #comments
    } | jq -RnMcs '
        (inputs | split("\n"))[:-1] as $lines |
        .["id"]=$lines[0] |
        .["name"]=$lines[1] |
        .["verified"]=$lines[2] |
        .["winner"]=$lines[3] |
        .["cover"]=$lines[4] |
        .["avatar"]=$lines[5] |
        .["views"]=$lines[6] |
        .["subscribers_count"]=$lines[7] |
        .["current_rank"]=$lines[8] |
        .["weekly_rank"]=$lines[9] |
        .["monthly_rank"]=$lines[10] |
        .["last_month_rank"]=$lines[11] |
        .["yearly_rank"]=$lines[12] |
        .["info_pieces"]=($lines[13] | split("\t") | map(split("") | {("key"):.[0],("value"):.[1]})) |
        .["social"]=(($lines[14] | split("\t"))[:-1]) |
        .["desc"]=$lines[15] |
        .["featured"]=(($lines[16] | split("\t"))[:-1]) |
        .["achievements"]=($lines[17] | '"$jq_achievements"') |
        .["subscribers"]=($lines[18] | '"$jq_users"') |
        .["subscriptions"]=($lines[19] | '"$jq_users"') |
        .["pornstar_subscriptions"]=($lines[20] | '"$jq_channels"') |
        .["channel_subscriptions"]=($lines[21] | '"$jq_channels"') |
        .["friends"]=($lines[22] | '"$jq_users"') |
        .["costars"]=($lines[23] | '"$jq_channels"') |
        .["gifs"]=($lines[24] | '"$jq_gifphotos"') |
        .["photos"]=($lines[25] | '"$jq_gifphotos"') |
        .["comments"]=if $lines[26] == "" then [] else ($lines[26:] | '"$jq_comments"') end'
}

get_u_json() {
    local -r link="${1%/}"
    local -r t="$(ucurl -c "$cookie_t" "$link" | tr -d '\n\t\r\a')"
    local _tmp1 t2
    {
    echo "${1#https://www.pornhub.com/}" #id
    echo "$(hgrep 'div +class=profileUserName; a +title | "%(title)a\n"' <<< "$t")" #name
    echo "$(hgrep 'img +id="coverPictureDefault" | "%(src)a\n"' <<< "$t")" #cover
    _tmp1="$(hgrep 'img +id="getAvatar" | "%(src)a\n"' <<< "$t")"
    [ -z "$_tmp1" ] && _tmp1="$(hgrep 'div +class="thumbImage"; img +src | "%(src)a\n"' <<< "$t")"
    echo "$_tmp1" #avatar
    echo "$(hgrep 'div +class=profileInfo; d[td] | "%i\n"' <<< "$t" | sed ':x; N;s/:\n/\a/; $!{N;s/\n/\t/;bx}')" #info_pieces
    echo "$(hgrep 'div +class=profileInfo; p | "%i\n"' <<< "$t")" #desc

    local -a a
    for i in 'myachievements`achievements`achievements``' 'subscribers`users`subscribers`recent_subscribers`' 'subscriptions`users`subscriptions`recent_subscribers`' 'pornstar_subscriptions`pornstars`pornstar_subscriptions`recent_subscribers`' 'channel_subscriptions`channels`channel_subscriptions``' 'friends`users`friends`recent_friendships`'
    do
        mapfile -t -d '`' a <<< "$i"
        if [ -n "$(hgrep 'div +class=sectionTitle; a +href=".*/'"${a[0]}"'" @M"seeAll" | "%l\n"' <<< "$t")" ]
        then
            echo "$(get_${a[1]} "$link/${a[2]}" "${a[3]}")"
        else
            echo
        fi
    done #achievements subscribers subscriptions pornstar_subscriptions channel_subscriptions friends

    t2="$(hgrep 'li +id="\(pornstar\|profile\)Photos" @m"\(GIFs\|Photos\)"; .* @M"<"' <<< "$t")"
    if [ -n "$t2" ]
    then
        echo "$(grep -q 'GIFs' <<< "$t2" && get_gifphotos "$link/gifs")"
        echo "$(grep -q 'Photos' <<< "$t2" && get_gifphotos "$link/photos")"
    else
        printf '\n\n'
    fi #gifs photos

    echo "$(get_videos "$link/videos")" #videos

    } | jq -RnMc '
        .["id"]=input |
        .["name"]=input |
        .["cover"]=input |
        .["avatar"]=input |
        .["info_pieces"]=(input | split("\t") | map(split("") | {("key"):.[0],("value"):.[1]})) |
        .["desc"]=input | 
        .["achievements"]=(input | '"$jq_achievements"') |
        .["subscribers"]=(input | '"$jq_users"') |
        .["subscriptions"]=(input | '"$jq_users"') |
        .["pornstar_subscriptions"]=(input | '"$jq_channels"') |
        .["channel_subscriptions"]=(input | '"$jq_channels"') |
        .["friends"]=(input | '"$jq_users"') |
        .["gifs"]=(input | '"$jq_gifphotos"') |
        .["photos"]=(input | '"$jq_gifphotos"') |
        .["videos"]=(input | '"$jq_gifphotos"')'
}

get_P_json() {
    local -r t="$(ucurl -c "$cookie_t" "$1")"
    local _tmp1 _tmp2 _tmp3
    {
    sed -n '/^        PLAYLIST_VIEW = {/{ s/^        PLAYLIST_VIEW = //; s/;$//; p;q}' <<< "$t" | jq -r '(.description | split("\n") | join("\t")) as $l | "\(.title)\n\($l)\n\(.user_id)\n\(.id)\n\(.date_added)\n\(.date_updated)\n\(.favorite_count)"' #title #desc #userid #id #added #updated #fav_count
    echo "$(hgrep 'div +id=js-aboutPlaylistTabView; div +class="usernameWrap\( .*\)*"; a | "%i\n"' <<< "$t")" #author
    echo "$(hgrep 'div +id=js-aboutPlaylistTabView; div +class="usernameWrap\( .*\)*"; a +href | "%(href)a\n"' <<< "$t")" #author_link
    _tmp1="$(hgrep 'div +class="views"; span +class="count" | "%i\n"' <<< "$t")"
    echo "${_tmp1//,/}" #views
    echo "$(hgrep 'div +class="votes-count-container"; span +class="votesUp" | "%i\n"' <<< "$t")" #likes
    echo "$(hgrep 'div +class="votes-count-container"; span +class="votesDown" | "%i\n"' <<< "$t")" #dlikes
    echo "$(hgrep 'div +id="tagSection"; a +class="\(.* \)*item\( .*\)*" |  "%i\n"' <<< "$t" | sed ':x; $!{N; s/\n/\t/; bx}')" #tags
    _tmp2="$(sed -n '/^        var itemsCount = /{s/^.* = //;s/ .*//;p;q}' <<< "$t")"
    _tmp1="$(sed -n '/^        var lazyloadUrl = /{s/^        var lazyloadUrl = "/https:\/\/pornhub\.com/; s/";$//; p;q}' <<< "$t")"
    hgrep 'ul +id="videoPlaylist"; li +data-video-vkey |  "%(data-video-vkey)a "' <<< "$t"
    for ((i=2; i <= ((_tmp2-36)/40)+1; i++))
    do
        ucurl -b "$cookie_t" "$_tmp1&page=$i" | hgrep 'li +data-video-vkey |  "%(data-video-vkey)a "'
    done #vids
    echo
    echo "$(tr -d '\n\r\t'  <<< "$t" | get_comments)" #comments
    } | jq -RnMcs '
        (inputs | split("\n"))[:-1] as $lines |
        .["title"]=$lines[0] |
        .["desc"]=($lines[1] | split("\t") | join("\n")) |
        .["userid"]=$lines[2] |
        .["id"]=$lines[3] |
        .["added"]=$lines[4] |
        .["uploaded"]=$lines[5] |
        .["fav_count"]=$lines[6] |
        .["author"]=$lines[7] |
        .["author_link"]=$lines[8] |
        .["views"]=$lines[9] |
        .["likes"]=$lines[10] |
        .["dlikes"]=$lines[11] |
        .["tags"]=($lines[12] | split("\t")) |
        .["vids"]=($lines[13] | split(" "))[:-1] |
        .["comments"]=(if $lines[14] == "" then [] else $lines[14:] | '"$jq_comments"' end)'
}

[ "$#" -eq '0' ] && { usage >&2; exit 1; }

while [ "$#" -gt 0 ]
do
    case "$1" in
        -t) threads="$2"; shift;;
        -p) pattern='pornstars'; func='get_p_json';;
        -v) pattern='g_vids'; func='get_v_json';;
        -m) pattern='models'; func='get_p_json';;
        -P) pattern='playlists'; func='get_P_json';;
        -u) pattern="$(realpath "$2")"; func='get_u_json'; shift;;
        -C) NOCOMMENTS='1';;
        -S) NOSOCIAL='1';;
        -h) usage; exit 0;;
        -*) printf '%s: invalid argument -- %s\n' "$(basename "$0")" "$1" >&2; exit 1;;
        *) dir="$1";;
    esac
    shift
done

[ -z "$pattern" ] && { printf '%s: No option specified the type of pages\n' "$(basename "$0")" >&2; exit 1; }
cd "$dir" || exit 1

cookie_t="$(mktemp)"
trap 'rm "$cookie_t"; exit' EXIT

if [ "$func" = "get_u_json" ]
then
    [ -f "$pattern" ] || { printf '%s: "%s" is not a file\n' "$arg0" "$pattern" >&2; exit 1; }
    while read -r c
    do
        [ "$(jobs | wc -l)" -gt "$threads" ] && wait %%
        out="$(sha256sum <<< "$c")"
        out="${out%  *}"
        [ -e "$out" ] && continue
        echo "$c"
        get_u_json "$c" > "$out" &
    done < "$pattern"
    exit
fi

for i in $(ucurl 'https://www.pornhub.com/sitemaps.xml' | hgrep 'loc @m"/sitemap_'"$pattern"'[0-9]*\.xml" | "%i\n"')
do
    for j in $(ucurl "$i" | hgrep 'loc | "%i\n"')
    do
        [ "$(jobs | wc -l)" -gt "$threads" ] && wait %%
        rh="$(sha256sum <<< "$j")"
        rn="${rh%  *}"
        [ -e "$rn" ] && continue
        echo "$j"
        "$func" "$j" > "$rn" &
    done
done

wait

#tr -d '\0'
#jq -r '.comments[].user_link' pornhub-videos.json | grep '/users/'
#jq -r '.author_link' pornhub-playlists.json | grep '/users/'
#jq -r  '.subscribers[].link , .subscriptions[].link , .friends[].link  , .comments[].user_link' pornhub-models.json pornhub-pornstars.json | grep '/users/'
#sed -i 's#^#https://www.pornhub.com#' pornhub-userlist
